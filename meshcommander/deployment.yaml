apiVersion: v1
kind: Service
metadata:
  name: meshcommander
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: meshcommander
    app.kubernetes.io/name: meshcommander
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meshcommander
  labels:
    app.kubernetes.io/instance: meshcommander
    app.kubernetes.io/name: meshcommander
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: meshcommander
      app.kubernetes.io/name: meshcommander
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: meshcommander
        app.kubernetes.io/name: meshcommander
    spec:
      volumes:
        - name: app
          emptyDir: {}
      initContainers:
        - name: download
          image: docker.io/node:lts-slim
          volumeMounts:
            - name: app
              mountPath: /app
          workingDir: /app
          command: ["npm"]
          args: ["install", "meshcommander"]
      containers:
        - name: meshcommander
          image: docker.io/node:lts-slim
          command: ["node", "/app/node_modules/meshcommander", "--any"]
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: app
              mountPath: /app
          livenessProbe:
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 30